// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  WAREHOUSE_MANAGER
  RETAIL_SHOP_MANAGER
}

model User {
  id               String  @id @default(cuid())
  firstName        String
  lastName         String
  username         String  @unique
  phone            String  @unique
  password         String
  amharicFirstName String? @map("የ መጀመሪያ ስም") @db.Text
  amharicLastName  String? @map("የ አባት ስም") @db.Text

  role      UserRole @default(USER)
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProfile       UserProfile?
  retailShop        RetailShop[]       @relation("RetailShopManager")
  warehouse         Warehouse[]        @relation("WarehouseManager")
  notifications     Notification[]
  notificationToken NotificationToken?

  @@index([username, phone])
}

model Notification {
  id           String   @id @default(cuid())
  title        String
  amharicTitle String?  @map("የ ርዕስ ስም") @db.Text
  body         String
  amharicBody  String?  @map("መልእክት") @db.Text
  status       Boolean  @default(false)
  createdById  String
  createdBy    User     @relation(fields: [createdById], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model NotificationToken {
  id                  String   @id @default(cuid())
  device_type         String
  notifications_token String   @unique
  status              Boolean  @default(false)
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  photoUrl  String?
  idUrl     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  addressId String?  @unique
  address   Address? @relation("User Address", fields: [addressId], references: [id])
}

model Category {
  id                 String     @id @default(cuid())
  name               String     @unique
  amharicName        String?    @map("የ እቃ ክፍል ስም") @db.Text
  description        String
  amharicDescription String?    @map("መግለጫ") @db.Text
  parentId           String?
  parent             Category?  @relation("Subcategory", fields: [parentId], references: [id])
  subcategories      Category[] @relation("Subcategory")
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  products           Product[]
}

enum UnitType {
  PIECES
  KG
  LITER
}

model Product {
  id                String   @id @default(cuid())
  serialNumber      String
  name              String
  // amharicName field contains the title of the product in amharic character
  amharicName       String?  @map("የ እቃ ስም") @db.Text
  description       String
  // amharicDescription field contains the description of the product in amharic character
  amharicDecription String?  @map("መግለጫ") @db.Text
  categoryId        String
  category          Category @relation(fields: [categoryId], references: [id])
  unit              UnitType
  images            String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  activePrice     PriceHistory?     @relation("ActivePrice")
  priceHistory    PriceHistory[]    @relation("ProductPriceHistory")
  saleTransaction SaleTransaction[]
  retailShopStock RetailShopStock[]
  warehouseStock  WarehouseStock[]
  goods           StockItem[]

  @@unique([id, createdAt])
}

model PriceHistory {
  id               String   @id @default(cuid())
  productId        String
  productCreatedAt DateTime
  price            Float
  purchasedPrice   Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  activeProduct    Product  @relation("ActivePrice", fields: [productId, productCreatedAt], references: [id, createdAt])
  product          Product  @relation("ProductPriceHistory", fields: [productId], references: [id])

  @@unique([productId, productCreatedAt])
}

model Address {
  id                      String       @id @default(cuid())
  street                  String?
  city                    String?
  lng                     Float?
  lat                     Float?
  formattedAddress        String?
  amharicFormattedAddress String?      @map("ሙሉ አድራሻ") @db.Text
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  retailShop              RetailShop?  @relation("RetailShop Address")
  warehouse               Warehouse?   @relation("Warehouse Address")
  userProfile             UserProfile? @relation("User Address")
}

model RetailShop {
  id                  String   @id @default(cuid())
  name                String
  amharicName         String?  @map("የስራ ቦታ ስም") @db.Text
  addressId           String?  @unique
  address             Address? @relation("RetailShop Address", fields: [addressId], references: [id])
  retailShopManagerId String?
  retailShopManager   User?    @relation("RetailShopManager", fields: [retailShopManagerId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  saleTransaction             SaleTransaction[]
  retailShopStock             RetailShopStock[]
  goodsTransfersAsDestination GoodsTransfer[]      @relation("DestinationShop")
  dailyTransaction            DailyTransaction[]
  monthlyTransaction          MonthlyTransaction[]
  annualTransaction           AnnualTransaction[]
}

model Warehouse {
  id                 String   @id @default(cuid())
  name               String
  amharicName        String?  @map("የስራ ቦታ ስም") @db.Text
  addressId          String?  @unique
  warehouseManagerId String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  address                     Address?          @relation("Warehouse Address", fields: [addressId], references: [id])
  warehouseManager            User?             @relation("WarehouseManager", fields: [warehouseManagerId], references: [id])
  goodsTransfersAsSource      GoodsTransfer[]   @relation("SourceWarehouse")
  warehouseStock              WarehouseStock[]
  retailShopStock             RetailShopStock[]
  goodsTransfersAsDestination GoodsTransfer[]   @relation("DestinationWarehouse")
}

enum TransferType {
  WarehouseToWarehouse
  WarehouseToRetailShop
}

model GoodsTransfer {
  id                     String       @id @default(cuid())
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  retailShopId           String?
  retailShop             RetailShop?  @relation("DestinationShop", fields: [retailShopId], references: [id])
  sourceWarehouseId      String
  sourceWarehouse        Warehouse    @relation("SourceWarehouse", fields: [sourceWarehouseId], references: [id])
  destinationWarehouseId String?
  destinationWarehouse   Warehouse?   @relation("DestinationWarehouse", fields: [destinationWarehouseId], references: [id])
  transferType           TransferType @default(WarehouseToWarehouse)
  goods                  StockItem[]  @relation("Goods Transfer")
}

model StockItem {
  id              String        @id @default(cuid())
  goodsTransferId String
  productId       String
  product         Product?      @relation(fields: [productId], references: [id])
  quantity        Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  goodsTransfer   GoodsTransfer @relation("Goods Transfer", fields: [goodsTransferId], references: [id])
}

model SaleTransaction {
  id             String     @id @default(cuid())
  productId      String
  product        Product    @relation(fields: [productId], references: [id])
  quantity       Float
  price          Float
  purchasedPrice Float
  retailShopId   String
  retailShop     RetailShop @relation(fields: [retailShopId], references: [id])
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model RetailShopStock {
  id           String     @id @default(cuid())
  productId    String
  product      Product    @relation(fields: [productId], references: [id])
  warehouseId  String
  warehouse    Warehouse  @relation(fields: [warehouseId], references: [id])
  quantity     Float
  maxQuantity  Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  retailShop   RetailShop @relation(fields: [retailShopId], references: [id])
  retailShopId String

  @@unique([productId, retailShopId])
}

model WarehouseStock {
  id          String    @id @default(cuid())
  productId   String
  warehouseId String
  quantity    Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])

  @@unique([productId, warehouseId])
}

model DailyTransaction {
  id           String     @id @default(cuid())
  retailShopId String
  date         DateTime
  totalSales   Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  retailShop   RetailShop @relation(fields: [retailShopId], references: [id])
}

model MonthlyTransaction {
  id           String     @id @default(cuid())
  retailShopId String
  month        String
  totalSales   Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  retailShop   RetailShop @relation(fields: [retailShopId], references: [id])
}

model AnnualTransaction {
  id           String     @id @default(cuid())
  retailShopId String
  year         String
  totalSales   Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  retailShop   RetailShop @relation(fields: [retailShopId], references: [id])
}
