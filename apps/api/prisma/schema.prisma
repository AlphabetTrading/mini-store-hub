// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  WAREHOUSE_MANAGER
  RETAIL_SHOP_MANAGER
}

model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  username  String   @unique
  phone     String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProfileId String?      @unique
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  RetailShop    RetailShop[] @relation("RetailShopManager")
  Warehouse     Warehouse[]  @relation("WarehouseManager")

  @@index([username, phone])
}

model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  photoUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?
}

model Category {
  id            String     @id @default(cuid())
  name          String     @unique
  description   String
  parentId      String?
  parent        Category?  @relation("Subcategory", fields: [parentId], references: [id])
  subcategories Category[] @relation("Subcategory")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  products      Product[]
}

enum UnitType {
  PIECES
  WEIGHT
}

model Product {
  id           String   @id @default(cuid())
  serialNumber String
  name         String
  description  String
  categoryId   String
  category     Category @relation(fields: [categoryId], references: [id])
  unit         UnitType
  images       String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  activePriceId String? @unique

  ActivePrice      PriceHistory?      @relation("ActivePrice", fields: [activePriceId], references: [id])
  PriceHistory     PriceHistory[]     @relation("ProductPriceHistory")
  ProductInventory ProductInventory[]
  GoodsTransfer    GoodsTransfer[]
  SaleTransaction  SaleTransaction[]
}

model PriceHistory {
  id             String    @id @default(cuid())
  productId      String
  price          Float
  purchasedPrice Float
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  products       Product[] @relation("ActivePrice")
  product        Product   @relation("ProductPriceHistory", fields: [productId], references: [id])

  @@unique([productId, createdAt])
}

model RetailShop {
  id                  String  @id @default(cuid())
  name                String
  address             String
  retailShopManagerId String?
  retailShopManager   User?   @relation("RetailShopManager", fields: [retailShopManagerId], references: [id])

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  GoodsTransfer   GoodsTransfer[]
  SaleTransaction SaleTransaction[]
}

model Warehouse {
  id                 String  @id @default(cuid())
  name               String
  address            String
  warehouseManagerId String?
  warehouseManager   User?   @relation("WarehouseManager", fields: [warehouseManagerId], references: [id])

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ProductInventory ProductInventory[]
  GoodsTransfer    GoodsTransfer[]
}

model GoodsTransfer {
  id                 String            @id @default(cuid())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  retailShopId       String?
  RetailShop         RetailShop?       @relation(fields: [retailShopId], references: [id])
  productInventoryId String?
  ProductInventory   ProductInventory? @relation(fields: [productInventoryId], references: [id])
  productId          String?
  products           Product?          @relation(fields: [productId], references: [id])
  Warehouse          Warehouse?        @relation(fields: [warehouseId], references: [id])
  warehouseId        String?
}

model SaleTransaction {
  id           String     @id @default(cuid())
  productId    String
  product      Product    @relation(fields: [productId], references: [id])
  quantity     Int
  price        Float
  retailShopId String
  retailShop   RetailShop @relation(fields: [retailShopId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model ProductInventory {
  id            String          @id @default(cuid())
  productId     String
  product       Product         @relation(fields: [productId], references: [id])
  warehouseId   String
  warehouse     Warehouse       @relation(fields: [warehouseId], references: [id])
  quantity      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  GoodsTransfer GoodsTransfer[]
}
