generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  // shadowDatabaseUrl = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  firstName          String
  lastName           String
  username           String              @unique
  phone              String              @unique
  password           String
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // amharicFirstName String? @map("የ መጀመሪያ ስም")
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // amharicLastName String? @map("የ አባት ስም")
  amharicFirstName   String?
  amharicLastName    String?
  gender             Gender              @default(MALE)
  role               UserRole            @default(USER)
  isActive           Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  notifications      Notification[]      @relation("Notifications")
  notificationTokens NotificationToken[] @relation("NotificationToken")
  retailShop         RetailShop[]        @relation("RetailShopManager")
  userProfile        UserProfile?
  warehouse          Warehouse[]         @relation("WarehouseManager")

  @@index([username, phone])
}

model Notification {
  id                String             @id @default(uuid())
  title             String
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // amharicTitle String? @map("የ ርዕስ ስም")
  amharicTitle      String?
  body              String
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // amharicBody String? @map("መልእክት")
  amharicBody       String?
  status            Boolean            @default(false)
  recipientType     RecipientType      @default(USER)
  recipientId       String?
  isRead            Boolean
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userId            String?
  user              User?              @relation("Notifications", fields: [userId], references: [id], onDelete: Cascade)
  notificationReads NotificationRead[] @relation("ReadNotification")
}

model NotificationRead {
  id             String       @id @default(uuid())
  notificationId String
  userId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  notification   Notification @relation("ReadNotification", fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([notificationId, userId])
}

model NotificationToken {
  id          String   @id @default(uuid())
  device_type String
  token       String   @unique
  status      Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("NotificationToken", fields: [userId], references: [id], onDelete: Cascade)
}

model UserProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  photoUrl  String?
  idUrl     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  addressId String?  @unique
  address   Address? @relation("User Address", fields: [addressId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id                 String     @id @default(uuid())
  name               String     @unique
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // amharicName String? @map("የ እቃ ክፍል ስም")
  amharicName        String?
  description        String
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // amharicDescription String? @map("መግለጫ")
  amharicDescription String?
  parentId           String?
  image              String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  parent             Category?  @relation("Subcategory", fields: [parentId], references: [id], onDelete: Cascade)
  subcategories      Category[] @relation("Subcategory")
  products           Product[]
}

model Product {
  id                 String            @id @default(uuid())
  serialNumber       String
  name               String
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // amharicName String? @map("የ እቃ ስም")
  amharicName        String?
  description        String
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // amharicDescription String? @map("መግለጫ")
  amharicDescription String?
  categoryId         String
  unit               UnitType
  images             String[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  category           Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  retailShopStock    RetailShopStock[]
  goods              StockItem[]
  warehouseStock     WarehouseStock[]

  @@unique([id, createdAt])
}

model PriceHistory {
  id                    String           @id @default(uuid())
  price                 Float
  purchasedPrice        Float
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  retailShopStockId     String?
  stockType             StockType?       @default(RETAIL_SHOP)
  warehouseStockId      String?
  retailShopStock       RetailShopStock? @relation("RetailShopStockPriceHistory", fields: [retailShopStockId], references: [id], onDelete: Cascade)
  warehouseStock        WarehouseStock?  @relation("WarehouseStockPriceHistory", fields: [warehouseStockId], references: [id], onDelete: Cascade)
  activeRetailShopStock RetailShopStock? @relation("ActivePrice")
  activeWarehouseStock  WarehouseStock?  @relation("ActiveWarehouseStockPrice")
}

model Address {
  id                      String       @id @default(uuid())
  street                  String?
  city                    String?
  lng                     Float?
  lat                     Float?
  formattedAddress        String?
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // amharicFormattedAddress String? @map("ሙሉ አድራሻ")
  amharicFormattedAddress String?
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  retailShop              RetailShop?  @relation("RetailShop Address")
  userProfile             UserProfile? @relation("User Address")
  warehouse               Warehouse?   @relation("Warehouse Address")
}

model RetailShop {
  id                          String                  @id @default(uuid())
  name                        String
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // amharicName String? @map("የስራ ቦታ ስም")
  amharicName                 String?
  addressId                   String?                 @unique
  retailShopManagerId         String?
  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt
  status                      Boolean?                @default(true)
  annualTransaction           AnnualTransaction[]
  dailyTransaction            DailyTransaction[]
  goodsTransfersAsDestination GoodsTransfer[]         @relation("DestinationShop")
  monthlyTransaction          MonthlyTransaction[]
  address                     Address?                @relation("RetailShop Address", fields: [addressId], references: [id])
  retailShopManager           User?                   @relation("RetailShopManager", fields: [retailShopManagerId], references: [id])
  retailShopStock             RetailShopStock[]
  retailShopTransactions      RetailShopTransaction[] @relation("RetailShopStock_RetailShopStockTransaction")
}

model Warehouse {
  id                          String            @id @default(uuid())
  name                        String
  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // amharicName String? @map("የስራ ቦታ ስም")
  amharicName                 String?
  addressId                   String?           @unique
  warehouseManagerId          String?
  isMain                      Boolean           @default(false)
  status                      Boolean?          @default(true)
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt
  goodsTransfersAsDestination GoodsTransfer[]   @relation("DestinationWarehouse")
  goodsTransfersAsSource      GoodsTransfer[]   @relation("SourceWarehouse")
  retailShopStock             RetailShopStock[]
  address                     Address?          @relation("Warehouse Address", fields: [addressId], references: [id])
  warehouseManager            User?             @relation("WarehouseManager", fields: [warehouseManagerId], references: [id])
  warehouseStock              WarehouseStock[]
}

model GoodsTransfer {
  id                     String       @id @default(uuid())
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  retailShopId           String?
  sourceWarehouseId      String
  destinationWarehouseId String?
  transferType           TransferType @default(WarehouseToWarehouse)
  destinationWarehouse   Warehouse?   @relation("DestinationWarehouse", fields: [destinationWarehouseId], references: [id])
  retailShop             RetailShop?  @relation("DestinationShop", fields: [retailShopId], references: [id])
  sourceWarehouse        Warehouse    @relation("SourceWarehouse", fields: [sourceWarehouseId], references: [id])
  goods                  StockItem[]  @relation("Goods Transfer")
}

model StockItem {
  id              String        @id @default(uuid())
  goodsTransferId String
  productId       String
  quantity        Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  goodsTransfer   GoodsTransfer @relation("Goods Transfer", fields: [goodsTransferId], references: [id])
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model RetailShopStock {
  id                         String                      @id @default(uuid())
  productId                  String
  warehouseId                String
  quantity                   Float
  maxQuantity                Float
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  retailShopId               String
  activePriceId              String?                     @unique
  priceHistory               PriceHistory[]              @relation("RetailShopStockPriceHistory")
  activePrice                PriceHistory?               @relation("ActivePrice", fields: [activePriceId], references: [id])
  product                    Product                     @relation(fields: [productId], references: [id], onDelete: Cascade)
  retailShop                 RetailShop                  @relation(fields: [retailShopId], references: [id])
  warehouse                  Warehouse                   @relation(fields: [warehouseId], references: [id])
  retailShopTransactionItems RetailShopTransactionItem[] @relation("RetailShopStock_RetailShopTransactionItem")

  @@unique([productId, retailShopId])
}

model RetailShopTransaction {
  id                         String                      @id @default(uuid())
  total                      Float
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  retailShopId               String
  retailShop                 RetailShop                  @relation("RetailShopStock_RetailShopStockTransaction", fields: [retailShopId], references: [id])
  retailShopTransactionItems RetailShopTransactionItem[] @relation("RetailShopStockTransaction_RetailShopTransactionItem")
}

model RetailShopTransactionItem {
  id                      String                @id @default(uuid())
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  retailShopTransactionId String
  quantity                Float
  transactionType         TransactionType
  purchasePrice           Float
  sellingPrice            Float
  subTotal                Float
  retailShopStockId       String
  retailShopStock         RetailShopStock       @relation("RetailShopStock_RetailShopTransactionItem", fields: [retailShopStockId], references: [id])
  retailShopTransaction   RetailShopTransaction @relation("RetailShopStockTransaction_RetailShopTransactionItem", fields: [retailShopTransactionId], references: [id])
}

model WarehouseStock {
  id            String         @id @default(uuid())
  productId     String
  warehouseId   String
  quantity      Float
  maxQuantity   Float
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  activePriceId String?        @unique
  priceHistory  PriceHistory[] @relation("WarehouseStockPriceHistory")
  activePrice   PriceHistory?  @relation("ActiveWarehouseStockPrice", fields: [activePriceId], references: [id])
  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  warehouse     Warehouse      @relation(fields: [warehouseId], references: [id])

  @@unique([productId, warehouseId])
}

model DailyTransaction {
  id           String     @id @default(uuid())
  retailShopId String
  date         DateTime
  totalSales   Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  retailShop   RetailShop @relation(fields: [retailShopId], references: [id])
}

model MonthlyTransaction {
  id           String     @id @default(uuid())
  retailShopId String
  month        String
  totalSales   Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  retailShop   RetailShop @relation(fields: [retailShopId], references: [id])
}

model AnnualTransaction {
  id           String     @id @default(uuid())
  retailShopId String
  year         String
  totalSales   Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  retailShop   RetailShop @relation(fields: [retailShopId], references: [id])
}

enum Gender {
  FEMALE
  MALE
}

enum UserRole {
  USER
  ADMIN
  WAREHOUSE_MANAGER
  RETAIL_SHOP_MANAGER
}

enum RecipientType {
  USER
  RETAIL_SHOP
  WAREHOUSE
  ALL
}

enum UnitType {
  PIECES
  KG
  LITER
  METER
  METER_SQUARE
  BOX
  BAG
  BOTTLE
  OTHER
}

enum StockType {
  WAREHOUSE
  RETAIL_SHOP
}

enum TransferType {
  WarehouseToWarehouse
  WarehouseToRetailShop
}

enum TransactionType {
  PURCHASE
  SALE
}
