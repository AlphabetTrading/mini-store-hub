# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Address {
  amharicFormattedAddress: String
  city: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  formattedAddress: String
  id: ID!
  lat: Float
  lng: Float
  retailShop: RetailShop
  street: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  userProfile: UserProfile
  warehouse: Warehouse
}

type AnnualTransaction {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  retailShop: RetailShop!
  retailShopId: String!
  totalSales: Float!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  year: String
}

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

type Category {
  amharicDescription: String
  amharicName: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String
  id: ID!
  image: String
  name: String!
  parent: Category
  parentId: String
  products: [Category!]
  subcategories: [Category!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

type CountType {
  id: Int!
}

input CreateAddressInput {
  amharicFormattedAddress: String
  city: String
  formattedAddress: String
  lat: Float
  lng: Float
  street: String
}

input CreateBulkRetailShopStockInput {
  goods: [GoodsInput!]!
  retailShopId: String!
  warehouseId: String!
}

input CreateBulkSaleTransactionInput {
  createdAt: String
  goods: [CreateStockItemInput!]
  retailShopId: String!
}

input CreateBulkWarehouseStockInput {
  goods: [GoodsInput!]!
  warehouseId: String!
}

input CreateCategoryInput {
  amharicDescription: String
  amharicName: String
  description: String!
  image: String
  name: String!
  parentId: String
}

input CreateGoodsTransferFromMainWarehouseInput {
  destinationWarehouseId: String
  goods: [CreateStockItemInput!]
}

input CreateGoodsTransferInput {
  destinationWarehouseId: String
  goods: [CreateStockItemInput!]
  retailShopId: String
  sourceWarehouseId: String
  transferType: TransferType!
}

input CreateNotificationTokenInput {
  device_type: String!
  token: String!
  userId: String!
}

input CreatePriceHistoryInput {
  price: Float!
  productId: String!
  purchasedPrice: Float!
}

input CreateProductInput {
  activePriceId: String
  amharicDescription: String
  amharicName: String
  categoryId: String!
  description: String!
  images: [String!]
  name: String!
  unit: UnitType!
}

input CreateRetailShopInput {
  address: CreateAddressInput
  amharicName: String
  name: String!
  retailShopManagerId: String
}

input CreateRetailShopStockInput {
  productId: String!
  quantity: Float!
  retailShopId: String!
  warehouseId: String!
}

input CreateStockItemInput {
  productId: String!
  quantity: Float!
}

input CreateUserInput {
  amharicFirstName: String
  amharicLastName: String
  firstName: String
  gender: Gender
  lastName: String
  password: String!
  phone: String!
  userProfile: CreateUserProfileInput
  username: String!
}

input CreateUserProfileInput {
  address: CreateAddressInput
  idUrl: String
  photoUrl: String
}

input CreateWarehouseInput {
  address: CreateAddressInput
  amharicName: String
  name: String!
  warehouseManagerId: String
}

input CreateWarehouseStockInput {
  productId: String!
  quantity: Float!
  warehouseId: String!
}

type DailyTransaction {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  date: DateTime
  id: ID!
  retailShop: RetailShop!
  retailShopId: String!
  totalSales: Float!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
}

input FilterAddressInput {
  city: StringFilter
  createdAt: DateTimeFilter
  formattedAddress: StringFilter
  id: String
  street: StringFilter
}

input FilterCategoryInput {
  createdAt: DateTimeFilter
  description: StringFilter
  id: String
  name: StringFilter
  subcategories: FilterCategoryInput
}

input FilterGoodsTransferInput {
  createdAt: DateTimeFilter
  destinationWarehouse: FilterWarehouseInput
  id: String
  retailShop: FilterRetailShopInput
  sourceWarehouse: FilterWarehouseInput
  transferType: TransferType
}

input FilterPriceHistoryInput {
  createdAt: DateTimeFilter
  id: String
  product: FilterProductInput
}

input FilterProductInput {
  category: FilterCategoryInput
  createdAt: DateTimeFilter
  description: StringFilter
  id: String
  name: StringFilter
  retailShop: FilterRetailShopInput
  serialNumber: StringFilter
  warehouse: FilterWarehouseInput
}

input FilterRetailShopInput {
  address: FilterAddressInput
  createdAt: DateTimeFilter
  id: String
  name: StringFilter
}

input FilterRetailShopStockInput {
  createdAt: DateTimeFilter
  id: String
  product: FilterProductInput
  retailShopId: String
}

input FilterSaleTransactionInput {
  createdAt: DateTimeFilter
  id: String
  retailShop: FilterRetailShopInput
  saleTransactionsItems: FilterSaleTransactionItemInput
}

input FilterSaleTransactionItemInput {
  createdAt: DateTimeFilter
  id: String
  product: FilterProductInput
  retailShop: FilterRetailShopInput
}

input FilterUserInput {
  createdAt: DateTimeFilter
  firstName: StringFilter
  id: String
  lastName: StringFilter
  phone: StringFilter
  role: UserRole
}

input FilterWarehouseInput {
  createdAt: DateTimeFilter
  id: String
  name: StringFilter
}

input FilterWarehouseStockInput {
  createdAt: DateTimeFilter
  id: String
  product: FilterProductInput
  warehouse: FilterWarehouseInput
}

type ForgotPasswordResponse {
  """JWT access token"""
  accessToken: JWT!

  """Email sent"""
  message: String!

  """Password Reset"""
  success: Boolean!
}

"""User role"""
enum Gender {
  FEMALE
  MALE
}

type Goods {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  goodsTransferId: GoodsTransfer!
  id: ID!
  product: Product
  productId: String!
  quantity: Int!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

input GoodsInput {
  productId: String!
  quantity: Float!
}

type GoodsTransfer {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  destinationWarehouse: Warehouse
  destinationWarehouseId: String
  goods: [StockItem!]
  id: ID!
  retailShop: RetailShop
  retailShopId: String
  sourceWarehouse: Warehouse
  sourceWarehouseId: String
  transferType: TransferType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  password: String!
  phone: String!
}

type MonthlyTransaction {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  month: String
  retailShop: RetailShop!
  retailShopId: String!
  totalSales: Float!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Mutation {
  acceptNotification(notificationInput: CreateNotificationTokenInput!): NotificationToken!
  activateRetailShop(id: String!): RetailShop!
  activateUser(userId: String!): User!
  activateWarehouse(id: String!): Warehouse!
  changePassword(data: ChangePasswordInput!): User!
  changeUserPassword(newPassword: String!, userId: String!): User!
  createADMIN(data: CreateUserInput!): User!
  createBulkRetailShopStock(data: CreateBulkRetailShopStockInput!): [RetailShopStock!]!
  createBulkWarehouseStock(data: CreateBulkWarehouseStockInput!): [WarehouseStock!]!
  createCategory(data: CreateCategoryInput!): Category!
  createGoodsTransfer(data: CreateGoodsTransferInput!): GoodsTransfer!
  createGoodsTransferFromMainWarehouseToWarehouse(data: CreateGoodsTransferFromMainWarehouseInput!): GoodsTransfer!

  """Create a new price history"""
  createPriceHistory(priceHistory: CreatePriceHistoryInput!): PriceHistory!
  createProduct(data: CreateProductInput!): Product!
  createRetailShop(data: CreateRetailShopInput!): RetailShop!
  createRetailShopManager(data: CreateUserInput!): User!
  createRetailShopStock(data: CreateRetailShopStockInput!): RetailShopStock!
  createSaleTransaction(data: CreateBulkSaleTransactionInput!): SaleTransaction!
  createWarehouse(data: CreateWarehouseInput!): Warehouse!
  createWarehouseManager(data: CreateUserInput!): User!
  createWarehouseStock(data: CreateWarehouseStockInput!): WarehouseStock!
  deactivateRetailShop(id: String!): RetailShop!
  deactivateUser(userId: String!): User!
  deactivateWarehouse(id: String!): Warehouse!
  deleteCategory(id: String!): Category!
  deleteFile(url: String!): Boolean!
  deleteGoodsTransfer(id: String!): GoodsTransfer!
  deletePriceHistory(id: String!): PriceHistory!
  deleteProduct(id: String!): Product!
  deleteRetailShop(id: String!): RetailShop!
  deleteRetailShopStock(id: String!): RetailShopStock!
  deleteSaleTransaction(id: String!): SaleTransaction!
  deleteUserProfile(id: String!): UserProfile!
  deleteWarehouse(id: String!): Warehouse!
  deleteWarehouseStock(id: String!): WarehouseStock!
  disablePushNotification(data: UpdateNotificationTokenInput!, userId: String!): NotificationToken!
  forgotPassword(phone: String!): ForgotPasswordResponse!
  login(data: LoginInput!): Auth!
  markNotificationAsRead(notificationId: String!, userId: String!): Notification!
  refreshToken(refreshToken: JWT!): Token!
  removeNotificationToken(data: String!): NotificationToken!
  resetPassword(accessToken: String!, password: String!, phone: String!): ResetPasswordResponse!
  sendPushNotification(data: sendPushNotificationInput!): Notification!
  signup(data: SignupInput!): Auth!
  updateCategory(data: UpdateCategoryInput!, id: String!): Category!
  updateGoodsTransfer(data: UpdateGoodsTransferInput!, id: String!): GoodsTransfer!
  updateNotificationToken(data: UpdateNotificationTokenInput!, userId: String!): NotificationToken!
  updateProduct(data: UpdateProductInput!, id: String!): Product!
  updateRetailShop(data: UpdateRetailShopInput!, id: String!): RetailShop!
  updateRetailShopStock(data: UpdateRetailShopStockInput!, id: String!): RetailShopStock!
  updateSaleTransaction(data: UpdateSaleTransactionInput!, id: String!): SaleTransaction!
  updateUser(data: UpdateUserInput!): User!
  updateUserProfile(updateProfileInput: UpdateUserProfileInput!, userId: String!): UserProfile!
  updateUserRole(role: String!, userId: String!): User!
  updateUserbyId(data: UpdateUserInput!, id: String!): User!
  updateWarehouse(data: UpdateWarehouseInput!, id: String!): Warehouse!
  updateWarehouseStock(data: UpdateWarehouseStockInput!, id: String!): WarehouseStock!
  uploadFile(file: Upload!): String!
}

type Notification {
  amharicBody: String
  amharicTitle: String
  body: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  isRead: Boolean!
  notificationReads: [ReadNotification!]
  recipientId: String
  recipientType: RecipientType!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  user: User
}

type NotificationToken {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  device_type: String
  id: ID!
  token: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  user: User
}

input OrderByCategoryInput {
  createdAt: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
}

input OrderByGoodsTransferInput {
  createdAt: OrderDirection
  destinationWarehouse: OrderByWarehouseInput
  retailShop: OrderByRetailShopInput
  sourceWarehouse: OrderByWarehouseInput
  transferType: OrderDirection
  updatedAt: OrderDirection
}

input OrderByPriceHistoryInput {
  createdAt: OrderDirection
  price: OrderDirection
  product: OrderByProductInput
  purchasedPrice: OrderDirection
  updatedAt: OrderDirection
}

input OrderByProductInput {
  category: OrderByCategoryInput
  createdAt: OrderDirection
  name: OrderDirection
  serialNumber: OrderDirection
  unit: OrderDirection
  updatedAt: OrderDirection
}

input OrderByRetailShopInput {
  createdAt: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
}

input OrderByRetailShopStockInput {
  createdAt: OrderDirection
  product: OrderByProductInput
  quantity: OrderDirection
  retailShop: OrderByRetailShopInput
  updatedAt: OrderDirection
}

input OrderBySaleTransactionInput {
  createdAt: OrderDirection
  retailShop: OrderByRetailShopInput
  totalPrice: OrderDirection
  updatedAt: OrderDirection
}

input OrderByUserInput {
  createdAt: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  phone: OrderDirection
  updatedAt: OrderDirection
}

input OrderByWarehouseInput {
  createdAt: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
}

input OrderByWarehouseStockInput {
  createdAt: OrderDirection
  product: OrderByProductInput
  quantity: OrderDirection
  updatedAt: OrderDirection
  warehouse: OrderByWarehouseInput
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PaginationCategories {
  items: [Category!]!
  meta: PaginationInfo
}

type PaginationGoodsTransfer {
  items: [GoodsTransfer!]!
  meta: PaginationInfo
}

type PaginationInfo {
  count: Int
  limit: Int
  page: Int
}

input PaginationInput {
  skip: Int
  take: Int
}

type PaginationPriceHistories {
  items: [PriceHistory!]!
  meta: PaginationInfo
}

type PaginationProducts {
  items: [Product!]!
  meta: PaginationInfo
}

type PaginationProductsWithExtraInfo {
  items: [ProductRankWithExtraInfo!]!
  meta: PaginationInfo
}

type PaginationRetailShopStocks {
  items: [RetailShopStock!]!
  meta: PaginationInfo
}

type PaginationRetailShops {
  items: [RetailShop!]!
  meta: PaginationInfo
}

type PaginationRetailShopsWithExtraInfo {
  items: [RetailShopWithExtraInfo!]!
  meta: PaginationInfo
}

type PaginationSaleTransactions {
  items: [SaleTransaction!]!
  meta: PaginationInfo
}

type PaginationUser {
  items: [User!]!
  meta: PaginationInfo
}

type PaginationWarehouseStocks {
  items: [WarehouseStock!]!
  meta: PaginationInfo
}

type PaginationWarehouses {
  items: [Warehouse!]!
  meta: PaginationInfo
}

type PriceHistory {
  activeProduct: Product

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  price: Float!
  product: Product
  productId: String!
  purchasedPrice: Float!
  saleTransactionItems: [SaleTransactionItem!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Product {
  activePrice: PriceHistory
  activePriceId: String
  amharicDescription: String
  amharicName: String
  category: Category
  categoryId: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String!
  goods: [Goods!]
  id: ID!
  images: [String!]
  name: String!
  priceHistory: [PriceHistory!]
  retailShopStock: [RetailShopStock!]
  saleTransactionItem: [SaleTransactionItem!]
  serialNumber: String!
  unit: UnitType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  warehouseStock: [WarehouseStock!]
}

type ProductRankWithExtraInfo {
  activePrice: PriceHistory
  activePriceId: String
  amharicDescription: String
  amharicName: String
  category: Category
  categoryId: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String!
  goods: [Goods!]
  id: ID!
  images: [String!]
  name: String!
  priceHistory: [PriceHistory!]
  retailShopStock: [RetailShopStock!]
  saleTransactionItem: [SaleTransactionItem!]
  serialNumber: String!
  unit: UnitType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  value: Float
  warehouseStock: [WarehouseStock!]
}

type Query {
  allNotificationsByUserId(userId: String!): [Notification!]!
  categories(filterCategoryInput: FilterCategoryInput, orderBy: OrderByCategoryInput, paginationInput: PaginationInput): PaginationCategories!
  category(id: String!): Category!
  findGoodsTransferByWarehouseId(orderBy: OrderByGoodsTransferInput, paginationInput: PaginationInput, warehouseId: String!): PaginationGoodsTransfer!
  findIncomingGoodsTransferByWarehouseId(orderBy: OrderByGoodsTransferInput, paginationInput: PaginationInput, warehouseId: String!): PaginationGoodsTransfer!
  findLowStockByRetailShopId(paginationInput: PaginationInput, percentage: Float, retailShopId: String!): PaginationRetailShopStocks!
  findLowStockByWarehouseId(paginationInput: PaginationInput, percentage: Float, warehouseId: String!): PaginationWarehouseStocks!
  findOutgoingGoodsTransferByWarehouseId(orderBy: OrderByGoodsTransferInput, paginationInput: PaginationInput, warehouseId: String!): PaginationGoodsTransfer!
  findProductsBySoldQuantity(filterProductInput: FilterProductInput, orderBy: OrderByProductInput, paginationInput: PaginationInput): PaginationProductsWithExtraInfo!
  findProductsBySoldQuantityAndRetailShop(filterProductInput: FilterProductInput, orderBy: OrderByProductInput, paginationInput: PaginationInput, retailShopId: String!): PaginationProductsWithExtraInfo!
  findProductsBySoldQuantityAndWarehouse(filterProductInput: FilterProductInput, orderBy: OrderByProductInput, paginationInput: PaginationInput, warehouseId: String!): PaginationProductsWithExtraInfo!
  findProductsByTopProfit(filterProductInput: FilterProductInput, orderBy: OrderByProductInput, paginationInput: PaginationInput): PaginationProductsWithExtraInfo!
  findProductsByTopSell(filterProductInput: FilterProductInput, orderBy: OrderByProductInput, paginationInput: PaginationInput): PaginationProductsWithExtraInfo!
  findProductsByTopSellAndByRetailShop(filterProductInput: FilterProductInput, orderBy: OrderByProductInput, paginationInput: PaginationInput, retailShopId: String!): PaginationProductsWithExtraInfo!
  findProductsByTopSellAndByWarehouse(filterProductInput: FilterProductInput, orderBy: OrderByProductInput, paginationInput: PaginationInput, warehouseId: String!): PaginationProductsWithExtraInfo!
  getAllNotifications: [Notification!]!
  getRetailShopByManagerId(userId: String): RetailShop!
  getUsersNotificationDetailByUserIdAndNotificationId(notificationId: String!, userId: String!): Notification!
  getWarehouseByManagerId(userId: String): Warehouse!
  goodsTransfer(id: String!): GoodsTransfer!
  goodsTransfers(filterGoodsTransferInput: FilterGoodsTransferInput, orderBy: OrderByGoodsTransferInput, paginationInput: PaginationInput): PaginationGoodsTransfer!
  me: User!
  notificationById(id: String!): Notification!
  priceHistories: [PriceHistory!]!
  priceHistoryById(id: String!): PriceHistory!
  priceHistoryByProduct(filterPriceHistoryInput: FilterPriceHistoryInput, orderBy: OrderByPriceHistoryInput, paginationInput: PaginationInput): PaginationPriceHistories!
  product(productId: String!): Product!
  products(filterProductInput: FilterProductInput, orderBy: OrderByProductInput, paginationInput: PaginationInput): PaginationProducts!
  productsByCategory: [Product!]!
  readNotificationsByUserId(userId: String!): [Notification!]!
  retailShop(id: String!): RetailShop!
  retailShopSortByTotalProfit(endDate: String!, paginationInput: PaginationInput, startDate: String!): PaginationRetailShopsWithExtraInfo!
  retailShopSortByTotalSales(endDate: String!, paginationInput: PaginationInput, startDate: String!): PaginationRetailShopsWithExtraInfo!
  retailShopSortByTotalTransactions(endDate: String!, paginationInput: PaginationInput, startDate: String!): PaginationRetailShopsWithExtraInfo!
  retailShopStock(id: String!): RetailShopStock!
  retailShopStockById(id: String!): RetailShopStock!
  retailShopStockByProductId(productId: String!): [RetailShopStock!]!
  retailShopStockByProductIdAndByRetailShopId(productId: String!, retailShopId: String!): RetailShopStock!
  retailShopStockByProductIdAndWarehouseId(productId: String!, warehouseId: String!): [RetailShopStock!]!
  retailShopStockByRetailShopId(filterRetailShopStockInput: FilterRetailShopStockInput, orderBy: OrderByRetailShopStockInput, paginationInput: PaginationInput): PaginationRetailShopStocks!
  retailShopStockByWarehouseId(warehouseId: String!): [RetailShopStock!]!
  retailShopStocks: [RetailShopStock!]!
  retailShops(filterRetailShopInput: FilterRetailShopInput, orderBy: OrderByRetailShopInput, paginationInput: PaginationInput): PaginationRetailShops!
  retailShopsByAddress(address: String!): [RetailShop!]!
  saleTransaction(id: String!): SaleTransaction!
  saleTransactions(filterSaleTransactionInput: FilterSaleTransactionInput, orderBy: OrderBySaleTransactionInput, paginationInput: PaginationInput): PaginationSaleTransactions!
  saleTransactionsByRetailShop(orderBy: OrderBySaleTransactionInput, paginationInput: PaginationInput, retailShopId: String!): PaginationSaleTransactions!
  searchProduct(search: String!): [Product!]!
  searchProducts(search: String!): [Product!]!
  searchProductsByCategory(category: String!, search: String!): [Product!]!
  totalProducts(filterProductInput: FilterProductInput): Int!
  totalProfit: Float!
  totalProfitByDate(endDate: String!, startDate: String!): Float!
  totalProfitByDateAndProduct(endDate: String!, productId: String!, startDate: String!): Float!
  totalProfitByDateAndRetailShop(endDate: String!, retailShopId: String!, startDate: String!): Float!
  totalProfitByProduct(productId: String!): Float!
  totalProfitByRetailShop(retailShopId: String!): Float!
  totalProfitByRetailShopAndProduct(productId: String!, retailShopId: String!): Float!
  totalSales: Float!
  totalSalesByDate(endDate: String!, startDate: String!): Float!
  totalSalesByDateAndProduct(endDate: String!, productId: String!, startDate: String!): Float!
  totalSalesByDateAndRetailShop(endDate: String!, retailShopId: String!, startDate: String!): Float!
  totalSalesByProduct(productId: String!): Float!
  totalSalesByRetailShop(retailShopId: String!): Float!
  totalSalesByRetailShopAndProduct(productId: String!, retailShopId: String!): Float!
  totalSoldProductsByRetailShopAndDate(endDate: String!, retailShopId: String!, startDate: String!): Float!
  totalSoldQuantityByProduct(productId: String!): Float!
  totalSoldQuantityByRetailShop(retailShopId: String!): Float!
  totalSoldQuantityByRetailShopAndByDate(endDate: String!, retailShopId: String!, startDate: String!): Float!
  totalSoldQuantityByRetailShopAndProduct(productId: String!, retailShopId: String!): Float!
  totalTransactionsByDate(endDate: String!, startDate: String!): Float!
  totalTransactionsByRetailShopAndDate(endDate: String!, retailShopId: String!, startDate: String!): Float!
  totalValuationByRetailShopId(retailShopId: String!): StockValuation!
  totalValuationByRetailShopIdAndDate(endDate: String!, retailShopId: String!, startDate: String!): StockValuation!
  totalValuationByWarehouseId(warehouseId: String!): StockValuation!
  totalValuationByWarehouseIdAndDate(endDate: String!, startDate: String!, warehouseId: String!): StockValuation!
  unreadNotificationsByUserId(userId: String!): [Notification!]!
  unreadNotificationsCountByUserId(userId: String!): Float!
  user(id: String!): User!
  users(filterUserInput: FilterUserInput, orderBy: OrderByUserInput, paginationInput: PaginationInput): PaginationUser!
  warehouse(id: String!): Warehouse!
  warehouseStock(id: String!): WarehouseStock!
  warehouseStockByWarehouseId(warehouseId: String!): [WarehouseStock!]!
  warehouseStocks(filterWarehouseStockInput: FilterWarehouseStockInput, orderBy: OrderByWarehouseStockInput, paginationInput: PaginationInput): PaginationWarehouseStocks!
  warehouses(filterWarehouseInput: FilterWarehouseInput, orderBy: OrderByWarehouseInput, paginationInput: PaginationInput): PaginationWarehouses!
  warehousesByAddress(address: String!): [Warehouse!]!
}

type ReadNotification {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  notification: Notification
  notificationId: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  user: User
  userId: String
}

"""RecipientType"""
enum RecipientType {
  ALL
  RETAIL_SHOP
  USER
  WAREHOUSE
}

type ResetPasswordResponse {
  """JWT access token"""
  accessToken: JWT!

  """Password Reset message"""
  message: String!

  """Password Reset"""
  success: Boolean!
}

type RetailShop {
  address: Address
  addressId: String
  amharicName: String
  annualTransaction: [AnnualTransaction!]

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  dailyTransaction: [DailyTransaction!]
  goodsTransfersAsDestination: [GoodsTransfer!]
  id: ID!
  monthlyTransaction: [MonthlyTransaction!]
  name: String!
  retailShopManager: User
  retailShopManagerId: String
  retailShopStock: [RetailShopStock!]
  saleTransaction: [SaleTransaction!]
  status: Boolean!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type RetailShopStock {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  goodsTransfers: [GoodsTransfer!]
  id: ID!
  maxQuantity: Float!
  product: Product
  productId: String!
  quantity: Float!
  retailShop: RetailShop
  retailShopId: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type RetailShopWithExtraInfo {
  address: Address
  addressId: String
  amharicName: String
  annualTransaction: [AnnualTransaction!]

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  dailyTransaction: [DailyTransaction!]
  goodsTransfersAsDestination: [GoodsTransfer!]
  id: ID!
  monthlyTransaction: [MonthlyTransaction!]
  name: String!
  retailShopManager: User
  retailShopManagerId: String
  retailShopStock: [RetailShopStock!]
  saleTransaction: [SaleTransaction!]
  status: Boolean!
  totalProfit: Float
  totalSales: Float
  totalTransactions: Float

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type SaleTransaction {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  retailShop: RetailShop!
  retailShopId: String!
  saleTransactionItems: [SaleTransactionItem!]!
  totalPrice: Float!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type SaleTransactionItem {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  product: Product
  productId: String!
  quantity: Float!
  saleTransaction: SaleTransaction!
  soldPriceHistory: PriceHistory
  soldPriceHistoryId: String!
  subTotal: Float!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

input SignupInput {
  firstName: String!
  lastName: String!
  password: String!
  phone: String!
  username: String!
}

type StockItem {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  goodsTransfer: GoodsTransfer!
  goodsTransferId: String!
  id: ID!
  product: Product!
  productId: String!
  quantity: Float!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type StockValuation {
  count: Float
  totalQuantity: Float
  totalValuation: Float
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  mode: String = "insensitive"
  not: String
  startsWith: String
}

type SumType {
  price: Int!
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

"""TransferType"""
enum TransferType {
  WarehouseToRetailShop
  WarehouseToWarehouse
}

"""UnitType role"""
enum UnitType {
  BAG
  BOTTLE
  BOX
  KG
  LITER
  METER
  METER_SQUARE
  OTHER
  PIECES
}

input UpdateAddressInput {
  amharicFormattedAddress: String
  city: String
  formattedAddress: String
  lat: Float
  lng: Float
  street: String
}

input UpdateCategoryInput {
  amharicDescription: String
  amharicName: String
  description: String
  image: String
  name: String
  parentId: String
}

input UpdateGoodsTransferInput {
  destinationWarehouseId: String
  goods: [CreateStockItemInput!]
  retailShopId: String
  sourceWarehouseId: String
  transferType: TransferType
}

input UpdateNotificationTokenInput {
  device_type: String
  notification_token: String
}

input UpdateProductInput {
  activePriceId: String
  amharicDescription: String
  amharicName: String
  categoryId: String
  description: String
  images: [String!]
  name: String
  serialNumber: String
  unit: UnitType
}

input UpdateRetailShopInput {
  address: UpdateAddressInput
  amharicName: String
  name: String
  retailShopManagerId: String
}

input UpdateRetailShopStockInput {
  maxQuantity: Float
  productId: String
  quantity: Float
  retailShopId: String
  warehouseId: String
}

input UpdateSaleTransactionInput {
  createdAt: String
  goods: [CreateStockItemInput!]
  retailShopId: String
}

input UpdateUserInput {
  amharicFirstName: String
  amharicLastName: String
  firstName: String
  gender: Gender
  lastName: String
  password: String
  phone: String
  role: UserRole
  userProfile: UpdateUserProfileInput
  username: String
}

input UpdateUserProfileInput {
  address: UpdateAddressInput
  idUrl: String
  photoUrl: String
  userId: String
}

input UpdateWarehouseInput {
  address: UpdateAddressInput
  amharicName: String
  name: String
  warehouseManagerId: String
}

input UpdateWarehouseStockInput {
  productId: String
  quantity: Float
  warehouseId: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  amharicFirstName: String
  amharicLastName: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  firstName: String
  gender: Gender!
  id: ID!
  isActive: Boolean!
  lastName: String
  notificationTokens: [NotificationToken!]
  notifications: [Notification!]
  phone: String
  retailShop: [RetailShop!]
  role: UserRole!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  userProfile: UserProfile
  username: String!
  warehouse: [Warehouse!]
}

type UserProfile {
  address: Address
  addressId: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  idUrl: String
  photoUrl: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""User role"""
enum UserRole {
  ADMIN
  RETAIL_SHOP_MANAGER
  USER
  WAREHOUSE_MANAGER
}

type Warehouse {
  address: Address
  addressId: String
  amharicName: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  goodsTransferAsDestination: [GoodsTransfer!]
  goodsTransferAsSource: [GoodsTransfer!]
  id: ID!
  name: String!
  retailShopStock: [RetailShopStock!]
  status: Boolean!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  warehouseManager: User
  warehouseManagerId: String
  warehouseStock: [WarehouseStock!]
}

type WarehouseStock {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  goodsTransfers: [GoodsTransfer!]
  id: ID!
  maxQuantity: Float!
  product: Product
  productId: String!
  quantity: Float!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  warehouse: Warehouse
  warehouseId: String!
}

input sendPushNotificationInput {
  amharicBody: String
  amharicTitle: String
  body: String!
  recipientId: String
  recipientType: RecipientType!
  title: String!
}