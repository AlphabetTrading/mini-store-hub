# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

type Category {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  parent: Category
  parentId: String
  products: [Category!]
  subcategories: [Category!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input CreateCategoryInput {
  description: String!
  name: String!
}

input CreatePriceHistoryInput {
  price: Float!
  productId: String!
  purchasedPrice: Float!
}

input CreateProductInput {
  activePriceId: String
  categoryId: String!
  description: String!
  images: [String!]
  name: String!
  serialNumber: String!
  unit: UnitType!
}

input CreateProductInventoryInput {
  productId: String!
  quantity: Float!
  warehouseId: String!
}

input CreateRetailShopInput {
  address: Float!
  name: String!
  retailShopManagerId: String
}

input CreateSaleTransactionInput {
  price: Float!
  productId: String!
  quantity: Float!
  retailShopId: String!
}

input CreateUserProfileInput {
  photoUrl: String
}

input CreateWarehouseInput {
  address: String!
  name: String!
  warehouseManagerId: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GoodsTransfer {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  password: String!
  username: String!
}

type Mutation {
  changePassword(data: ChangePasswordInput!): User!
  createCategory(data: CreateCategoryInput!): Category!

  """Create a new price history"""
  createPriceHistory(priceHistory: CreatePriceHistoryInput!): PriceHistory!
  createProduct(data: CreateProductInput!): Product!
  createProductInventory(data: CreateProductInventoryInput!): ProductInventory!
  createRetailShop(data: CreateRetailShopInput!): RetailShop!
  createSaleTransaction(data: CreateSaleTransactionInput!): SaleTransaction!
  createUserProfile(createUserProfileInput: CreateUserProfileInput!): UserProfile!
  createWarehouse(data: CreateWarehouseInput!): Warehouse!
  deleteCategory(id: String!): Category!
  deletePriceHistory(id: String!): PriceHistory!
  deleteProduct(id: String!): Product!
  deleteProductInventory(id: String!): ProductInventory!
  deleteRetailShop(id: String!): RetailShop!
  deleteSaleTransaction(id: String!): SaleTransaction!
  deleteUserProfile(id: String!): UserProfile!
  deleteWarehouse(id: String!): Warehouse!
  login(data: LoginInput!): Auth!
  refreshToken(token: JWT!): Token!
  signup(data: SignupInput!): Auth!
  updateCategory(data: UpdateCategoryInput!, id: String!): Category!
  updateProduct(data: CreateProductInput!, id: String!): Product!
  updateProductInventory(data: UpdateProductInventoryInput!, id: String!): ProductInventory!
  updateRetailShop(data: UpdateRetailShopInput!, id: String!): RetailShop!
  updateSaleTransaction(data: UpdateSaleTransactionInput!, id: String!): SaleTransaction!
  updateUser(data: UpdateUserInput!): User!
  updateUserProfile(id: String!, updateProfileInput: UpdateUserProfileInput!): UserProfile!
  updateWarehouse(data: UpdateWarehouseInput!, id: String!): Warehouse!
  uploadFile(file: Upload!): String!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PriceHistory {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  price: Float!
  product: Product
  productId: String!
  purchasedPrice: Float!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Product {
  ActivePrice: PriceHistory
  activePriceId: String
  category: Category
  categoryId: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String!
  id: ID!
  images: [String!]
  name: String!
  serialNumber: String!
  unit: UnitType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type ProductInventory {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  goodsTransfers: [GoodsTransfer!]
  id: ID!
  product: Product
  productId: String!
  quantity: Float!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  warehouse: Warehouse
  warehouseId: String!
}

type Query {
  categories: [Category!]!
  me: User!
  priceHistories: [PriceHistory!]!
  priceHistory: PriceHistory!
  priceHistoryByProduct: [PriceHistory!]!
  product: Product!
  productInventories: [ProductInventory!]!
  productInventory(id: String!): ProductInventory!
  productInventoryByProductId(productId: String!): [ProductInventory!]!
  productInventoryByProductIdAndWarehouseId(productId: String!, warehouseId: String!): [ProductInventory!]!
  productInventoryByWarehouseId(warehouseId: String!): [ProductInventory!]!
  products: [Product!]!
  productsByCategory: [Product!]!
  retailManagers: [User!]!
  retailShop(id: String!): RetailShop!
  retailShops: [RetailShop!]!
  retailShopsByAddress(address: String!): [RetailShop!]!
  saleTransaction: SaleTransaction!
  saleTransactions: [SaleTransaction!]!
  saleTransactionsByRetailShop: [SaleTransaction!]!
  searchProduct(search: String!): [Product!]!
  user(id: String!): User!
  users(orderBy: UserOrder): [User!]!
  warehouseManagers: [User!]!
  warehouseWarehouse(id: String!): Warehouse!
  warehouseWarehouses: [Warehouse!]!
  warehousesByAddress(address: String!): [Warehouse!]!
}

type RetailShop {
  GoodsTransfer: [GoodsTransfer!]!
  SaleTransaction: [SaleTransaction!]!
  address: Float!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  name: String!
  retailShopManager: User
  retailShopManagerId: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type SaleTransaction {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  price: Float!
  product: Product
  productId: String!
  quantity: Float!
  retailShop: RetailShop!
  retailShopId: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

input SignupInput {
  firstName: String!
  lastName: String!
  password: String!
  phone: String!
  username: String!
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

"""UnitType role"""
enum UnitType {
  PIECES
  WEIGHT
}

input UpdateCategoryInput {
  description: String
  name: String
}

input UpdateProductInventoryInput {
  productId: String
  quantity: Float
  warehouseId: String
}

input UpdateRetailShopInput {
  address: Float
  name: String
  retailShopManagerId: String
}

input UpdateSaleTransactionInput {
  price: Float
  productId: String
  quantity: Float
  retailShopId: String
}

input UpdateUserInput {
  firstname: String
  id: String
  lastname: String
  phone: String
  role: UserRole!
  username: String
}

input UpdateUserProfileInput {
  photoUrl: String
}

input UpdateWarehouseInput {
  address: String
  name: String
  warehouseManagerId: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  firstName: String
  id: ID!
  lastName: String
  phone: String
  role: UserRole!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  userProfile: UserProfile
  username: String!
}

input UserOrder {
  direction: OrderDirection!
}

type UserProfile {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  photoUrl: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""User role"""
enum UserRole {
  ADMIN
  RETAIL_SHOP_MANAGER
  USER
  WAREHOUSE_MANAGER
}

type Warehouse {
  address: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  goodsTransfer: [GoodsTransfer!]
  id: ID!
  name: String!
  productInventory: [ProductInventory!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  warehouseManager: User
  warehouseManagerId: String
}