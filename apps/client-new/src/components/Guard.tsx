"use client";
import { usePathname, redirect } from "next/navigation";
import { useSession } from "next-auth/react";
import { Inter } from "next/font/google";
import { ThemeProvider } from "@emotion/react";
import { createTheme } from "@/theme";
import type { Metadata } from "next";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

declare module "@mui/material/styles" {
  interface Palette {
    neutral50: string;
    neutral100: string;
    neutral200: string;
    neutral300: string;
    neutral400: string;
    neutral500: string;
    neutral600: string;
    neutral700: string;
    neutral800: string;
    neutral900: string;
  }
  interface PaletteOptions {
    neutral50: string;
    neutral100: string;
    neutral200: string;
    neutral300: string;
    neutral400: string;
    neutral900: string;
    neutral500: string;
    neutral600: string;
    neutral700: string;
    neutral800: string;
  }
}

declare module "@mui/material/Box" {
  interface BoxPropsColorOverrides {
    neutral50: true;
    neutral100: true;
    neutral200: true;
    neutral300: true;
    neutral400: true;
    neutral500: true;
    neutral600: true;
    neutral700: true;
    neutral800: true;

    neutral900: true;
  }
}
const theme = createTheme({
  colorPreset: "blue",
  contrast: "normal",
  direction: "ltr",
  paletteMode: "light",
  responsiveFontSizes: true,
});

interface GuardProps {
  excludedRoutes?: string[];
  children: React.ReactNode;
}

const Guard = ({ excludedRoutes, children }: GuardProps) => {
  const pathname = usePathname();
  const { data, status } = useSession();

  if (status === "loading") return <h1>Loading</h1>;

  if (status === "authenticated" && excludedRoutes?.includes(pathname)) {
    if ((data?.user as any).role === "ADMIN") {
      redirect("/admin/dashboard");
    } else if ((data?.user as any).role === "WAREHOUSE_MANAGER") {
      redirect("/dashboard");
    } else {
      redirect("/auth/login");
    }
  }

  if (status === "unauthenticated") {
    if (!excludedRoutes?.includes(pathname)) redirect("/auth/login");
  }

  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;
};

export default Guard;
